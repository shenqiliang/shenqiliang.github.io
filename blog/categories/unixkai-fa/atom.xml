<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：Unix开发 | Xcode Dev]]></title>
  <link href="http://blog.xcodev.com/blog/categories/unixkai-fa/atom.xml" rel="self"/>
  <link href="http://blog.xcodev.com/"/>
  <updated>2014-02-24T17:57:08+08:00</updated>
  <id>http://blog.xcodev.com/</id>
  <author>
    <name><![CDATA[谌启亮]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[“#”的迷雾]]></title>
    <link href="http://blog.xcodev.com/blog/2013/12/16/mists-of-the-sharp/"/>
    <updated>2013-12-16T12:38:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/12/16/mists-of-the-sharp</id>
    <content type="html"><![CDATA[<p>在代码中使用Autolayout时，大家都会使用<code>NSDictionaryOfVariableBindings</code>这个宏，这个宏可以生成一个变量名到变量值映射的Dictionary。比如<code>NSDictionaryOfVariableBindings(button1, button2)</code>将会生成一个<code>{ @"button1" = button1, @"button2 = button2 }</code>的Dictionary。它是怎么做到的呢？我们来看看这个宏的定义：</p>

<pre><code>#define NSDictionaryOfVariableBindings(...) _NSDictionaryOfVariableBindings(@"" # __VA_ARGS__, __VA_ARGS__, nil)
</code></pre>

<p>这个宏定义中有3个参数，后两个参数不难理解，但第一个参数中间有个<code>#</code>符号，语法上看起来比较怪异，这个是什么呢？以前在做越狱的mobilesubstrate开发时，其中定义的一堆宏频繁使用了这个符号，下面就来揭开<code>#</code>这个符号在宏定义中的迷雾。</p>

<!--more-->


<h2>预编译的一些知识</h2>

<p>我们的代码在build时并不是直接进行编译的，在编译之前还进行了预编译处理。预编译会把include或import的文件导入到文件中，同时会将代码中用到的宏进行替换。注意宏是直接在代码中替换成宏的定义的，如果有嵌套也会逐层替换。</p>

<h2>&ldquo;#"指示一些预编译命令</h2>

<p>预编译命令一般都是以<code>#</code>开头的，比如<code>#include</code>、<code>#import</code>、<code>#if</code>等，在这里就不一一说明了，本文主要说明一下<code>#</code>在宏定义里面的一些作用。</p>

<h2>宏参数字符串化</h2>

<p>在一个参数前加一个<code>#</code>，预处理时将会变成这个参数名的字符串常量，即字符串化（stringify）。比如:</p>

<pre><code>#define GET_NAME(X) #X
int a = 0;
NSLog(@"%s",GET_NAME(a));      //output: "a"
NSLog(@"%s",GET_NAME(a+3));    //output: "a+3"
</code></pre>

<p>将会得到以下输出：</p>

<pre><code>a
a+3
</code></pre>

<p>可以看出<code>#</code>，将参数原样转换成字符串常量，如果参数是一个表达式，那么输出这个表达式的原样字符串常量。</p>

<p>回头再看看<code>NSDictionaryOfVariableBindings</code>的定义：</p>

<pre><code>#define NSDictionaryOfVariableBindings(...) _NSDictionaryOfVariableBindings(@"" # __VA_ARGS__, __VA_ARGS__, nil)
</code></pre>

<p>如果这样生成两个button的映射：</p>

<pre><code>NSDictionaryOfVariableBindings(button1, button2);
</code></pre>

<p>那么预编译时就会转换成：</p>

<pre><code>_NSDictionaryOfVariableBindings(@"""button1, button2", button1, button2, nil);
</code></pre>

<p>由于两个常量字符串放在一起就是字符串常量串联，将变成两个字符串常量组合在一起的字符串常量，也就是上面是一个空字符串<code>""</code>和<code>"button1, button2"</code>串联，所以上面的代码等价于：</p>

<pre><code>_NSDictionaryOfVariableBindings(@"button1, button2", button1, button2, nil);
</code></pre>

<p>那么<code>_NSDictionaryOfVariableBindings</code>函数就可以将它的第一个参数按逗号<code>,</code>分割开作为key，后面就是各个key对应的值了。因此这段代码就创建了一个内容为<code>{ @"button1" = button1, @"button2 = button2 }</code>的Dictionary。</p>

<h2>命名的串联</h2>

<p><code>#</code>在宏定义中的另一个作用就是用于命名的串联，用<code>##</code>就可以串联它左右两边的命名，比如以下代码：</p>

<pre><code>#define CONCAT(X, Y) X ## Y
NSString *helloworld = @"Hello, world!";
NSLog(@"%@",CONCAT(hello, world)); //output: "Hello, world"
</code></pre>

<p><code>CONCAT(hello, world)</code>实际被转换成<code>helloworld</code>。注意一下，因为宏是预编译阶段进行展开的，就是说在编译之前，因此代码中的<code>hello</code>和<code>world</code>即使没有定义其实也是没问题的，预编译处理后，这两个命名是不存在的。</p>

<h2>可选可变参数</h2>

<p><code>##</code>在宏定义中可以放在<code>__VA_ARGS__</code>之前表示可变参数可以为空，否则的话可变参数至少为一个了。</p>

<pre><code>#define MYLOG(format, ...) NSLog(format, ##__VA_ARGS__)
MYLOG(@"Don't make an error!");
</code></pre>

<p>上面代码中MLOG中只有一个参数，如果不加<code>##</code>，则MLOG至少需要两个参数，在Xcode里将会出现编译错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix系统中设置文件的扩展属性]]></title>
    <link href="http://blog.xcodev.com/blog/2013/06/05/extented-file-property-in-unix/"/>
    <updated>2013-06-05T10:03:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/06/05/extented-file-property-in-unix</id>
    <content type="html"><![CDATA[<p>Unix文件系统中对单个文件提供了很多属性，比如创建时间、文件大小、修改时间等，这些信息都保存在文件系统中的inode节点中，获取这些属性并不需要读取文件，所以获取速度是很快的。在开发过程中常常会使用这些属性，但更多的时候我们需要一个自定义的属性，来保存我们需要的一些值。比如我们给文件定义一个有效期，或者给文件加一个特殊标记等。</p>

<!--more-->


<h2>解决方法</h2>

<p>我们可以建立一个数据库，每个文件为一条数据，再自定义一些字段，然而这样做会有些同步问题，比如文件不小心被删除了，或者文件名字改了，这会导致数据库操作过于复杂；或者我们在文件中添加一些自定义内容，加入文件的特定部分，但这样每次获取这些属性时都要读取这个文件，开销代价很高。</p>

<!--more-->


<p>其实Unix系统中提供了文件扩展属性的功能，可以非常方便的实现为文件添加自定义属性，这些属性会保存到文件节点数据中。如果文件删除了，这些数据也同时删除；如果文件改名了，也不会影响节点数据，因此这些属性依然会和改名后的文件关联；同时获取这些属性也不用去读取文件。设置一个自定义属性需要用到:</p>

<pre><code>int setxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);
int fsetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options);
</code></pre>

<p>这两个函数都是用来设置一个文件的扩展属性，唯一的区别是其中setxattr第一个参数是文件路径，而fsetxattr是已打开的文件描述符（由open/creat函数返回）。name是指定的属性的名字，是一个c字符串，为了保证名字的唯一性，建议使用反域名格式的名字，如“com.example.propertyname”。第三个参数value是值的地址，第四个参数size是值的大小，position设置为0。options可以有以下几个：</p>

<ul>
<li>XATTR_NOFOLLOW 不跟随符号链接，如果文件是符号链接的话，设置这个option后会设置符号链接本身的属性，而不是符号链接所指向的文件的。</li>
<li>XATTR_CREATE 只能创建标志，如果文件已经有同名属性，则返回失败。</li>
<li>XATTR_REPLACE 只能替换标志，如果文件没有同名属性，则返回失败。</li>
</ul>


<p>成功后这两个函数会返回0；否则返回-1，同时设置了系统的errno。
同时Unix还提供了相应的获取已设置扩展属性的方法：</p>

<pre><code>ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);
ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options);
</code></pre>

<p>参数和设置方法的对应，只是传入的size是value的内存空间，返回的是值实际的大小。</p>

<h2>具体用法</h2>

<p>设置文件的过期日期</p>

<pre><code>NSDate *expireDate = ...;
const char* cfilePath = [filePath fileSystemRepresentation];
const char* attrExpireDate = "com.xcodev.file.expireDate";
double attrDate = [expireDate timeIntervalSince1970];
setxattr(cfilePath, attrExpireDate, &amp;attrDate, sizeof(attrDate), 0, 0);
</code></pre>

<p>获取文件过期日期，如果过期了就删除。</p>

<pre><code>const char* cfilePath = [path fileSystemRepresentation];
const char* attrExpireDate = "com.xcodev.file.expireDate";
double expireTimestamp = 0;
if (getxattr(cfilePath, attrExpireDate, &amp;expireTimestamp, sizeof(expireTimestamp), 0, 0)&gt;0) {
      NSDate *expireDate = [NSDate dateWithTimeIntervalSince1970:expireTimestamp];
      if ([expireDate compare:[NSDate date]]==NSOrderedAscending) {
            [[NSFileManager defaultManager] removeItemAtPath:path error:NULL];
      }
}
</code></pre>

<h2>Do not Backup</h2>

<p>文件扩展属性的另一个在iOS中的具体应用就是设置不让iCould备份标记。</p>

<pre><code>const char* cfilePath = [filePath fileSystemRepresentation];
const char* attrBackup = "com.apple.MobileBackup";
u_int8_t attrValue = 1;
setxattr(cfilePath, attrBackup, &amp;attrValue, sizeof(attrValue), 0, 0);
</code></pre>

<p>把“com.apple.MobileBackup”的值设置为1后，iCloud就不再去备份这个文件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix命令行下的管道和I/O重定位]]></title>
    <link href="http://blog.xcodev.com/blog/2011/11/06/unix-pipe-and-io-redirect/"/>
    <updated>2011-11-06T22:57:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2011/11/06/unix-pipe-and-io-redirect</id>
    <content type="html"><![CDATA[<p>工作过程中，我们可能会需要将一个命令或程序的输出导出到一个文件，比如“svn diff”，或者将一个命令或程序的输出作为另一个命令或程序的输入，这是我们就需要Unix命令行下的管道和I/O重定位功能。</p>

<p>1、命令行下的管道用于将一个命令或程序的输出作为另一个命令或程序的输入。两个命令用管道符“｜”隔开。比如：我们可能会用到在某个目录下查找名称中包含某个字段的文件或目录，这时就可以用管道：</p>

<pre><code>ls -l | grep test
</code></pre>

<p>此命令会列出当前目录下所有名称中包含“test”的文件和目录。它由两个命令组成“ls -l”和“grep test”。“ls -l”会列出当前目录的所有文件并输出，而“grep test”会分析输入中包含“test”的行并显示。因此如果将“ls -l”的输出用于“grep test”的输入就会显示当前目录下所有名称中包含“test”的文件和目录。</p>

<!--more-->


<p>2、I/O的重定位</p>

<p>我们可以在命令行下直接将一个程序标准输入或输出重新定位到一个文件或设备中。“&lt;”号用于将命令或程序的标准输入重定位到某个文件，“>”用于将命令或程序的标准输出重定位到某个文件。比如</p>

<pre><code>cat &gt; test.txt
</code></pre>

<p>此命令会读取用户输入，并保存到“test.txt”文件中。输入此命令后，会进入用户输入状态，输入一些字符后按Control+D和Control+C结束输入，输入的内容将保存到“test.txt”文件中。</p>

<p>又比如：</p>

<pre><code>cat &lt; test.txt &gt; test2.txt
</code></pre>

<p>此命令将cat命令的标准输入重定位到“test.txt”文件，而标准输出重定位到“test2.txt”文件。这行命令的作用就是把“test.txt”文件拷贝为“test2.txt”文件。</p>
]]></content>
  </entry>
  
</feed>
