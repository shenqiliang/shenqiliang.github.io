<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：iOS开发 | Xcode Dev]]></title>
  <link href="http://blog.xcodev.com/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://blog.xcodev.com/"/>
  <updated>2013-10-23T16:24:41+08:00</updated>
  <id>http://blog.xcodev.com/</id>
  <author>
    <name><![CDATA[谌启亮]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[64位与Tagged Pointer]]></title>
    <link href="http://blog.xcodev.com/blog/2013/10/21/tagged-pointer-and-64-bit/"/>
    <updated>2013-10-21T16:09:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/10/21/tagged-pointer-and-64-bit</id>
    <content type="html"><![CDATA[<p>在Mac OS X 10.6（Snow Leopard）中开始支持64位，如今最新版本iPhone 5s也开始采用了Arm64架构。在64位化的过程中，其中一个比较关键的改进就是，Mac OS 10.7（Lion）和iOS 7的64位环境先后引入了Tagged Pointer。下面就简单地来介绍一下Tagged Pointer，在介绍Tagged Pointer之前有必要介绍一下指针地址对齐概念和64位环境的一些变化。</p>

<!--more-->


<h2>指针地址对齐</h2>

<p>在32位环境下，如果要读取一个32位整数，如果这个32位整数在内存地址为0x00000002-0x00000006（仅作举例，这个地址一般是被系统保留的）的内存上，读取这个整数会消耗2个CPU周期，而如果这个数在0x00000004-0x00000008的内存上只需要一个CPU周期。为了加快内存的CPU访问，程序都使用了指针地址对齐概念。指针地址对齐就是指在分配堆中的内存时往往采用偶数倍或以2为指数倍的内存地址作为地址边界。几乎所有系统架构，包括Mac OS和iOS，都使用了地址对齐概念。</p>

<pre><code>void *a = malloc(1);
void *b = malloc(3);
NSLog(@"a: %p",a);
NSLog(@"b: %p",b);
</code></pre>

<p>运行这段代码后，我得到了如下结果：</p>

<pre><code>a: 0x8c11e20
b: 0x8c11e30
</code></pre>

<p>可以看到，a和b指针的最后4位都是0，虽然a只占用1个字节，但是a和b的地址却相差16个字节。因为iOS中是以16个字节为内存分配边界的，或者说iOS的指针地址对齐是以16个字节为对齐边界的。进一步说，iOS中分配的内存地址最后4位永远都是0。</p>

<h2>64位地址</h2>

<p>在不久前发布iPhone5s中采用了Arm64的CPU，同时也支持了64位的App。64位App中指针大小也扩大到64位，就是理论上可以支持最大2<sup>64</sup>字节（达千万T字节）的内存地址空间。而对于大多数应用来说，这么大的地址空间完全是浪费的。也就是说64位环境下，内存地址的前面很多位一般都是0。</p>

<h2>Tagged Pointer</h2>

<p>由于指针地址对齐概念和64位超大地址的出现，指针地址仅仅作为内存的地址是比较浪费的，我们可以在指针地址中保存或附加更多的信息。这就引入了Tagged Pointer概念。Tagged Pointer是指那些指针中包含特殊属性或信息的指针。其中指针对齐概念可以让我们来标识一个指针是否是Tagged Pointer以及相关类型，64位的地址指针又为我们提供保存额外信息的足够空间。如今，iOS 7的64位环境和Mac OS 10.7（Lion）中开始引入了Tagged Pointer。</p>

<h2>NSNumber的优化</h2>

<p>Tagged Pointer一个比较典型的应用就是NSNumber，在64位环境下，对于一般的数字，NSNumber不用再分配内存了。我们看看NSNumber是如何运用Tagged Pointer的：</p>

<pre><code>NSNumber *number3 = @3;
NSNumber *number4 = @4;
NSNumber *number9 = @9;
NSLog(@"number3 pointer is %p", number3);
NSLog(@"number4 pointer is %p", number4);
NSLog(@"number9 pointer is %p", number9);
</code></pre>

<p>在64位模拟器中运行后，我得到了如下结果：</p>

<pre><code>number3 pointer is 0xb000000000000032
number4 pointer is 0xb000000000000042
number9 pointer is 0xb000000000000092
</code></pre>

<p>可以看出<code>number3</code>、<code>number4</code>和<code>number9</code>的值前4位都是0xb，后4位都是0x2（指针的Tag），中间就是实际的取值，因此，这些NSNumber已经不需要再分配内存（指堆中内存）了，直接可以把实际的值保存到指针中，而无需再去访问堆中的数据。这无疑提高的内存访问速度和整体运算速度。</p>

<p>也就是说Tagged Pointer本身就可以表示一个NSNumber了，在64位环境下运行这段代码：</p>

<pre><code>NSLog(@"0xb000000000000052's class is %@",[(NSNumber*)0xb000000000000052 class]);
</code></pre>

<p>会输出下面结果：</p>

<pre><code>0xb000000000000052's class is __NSCFNumber
</code></pre>

<p>那么如果一个数超过了Tagged Pointer所能表示的范围，系统会怎么处理？看看这段代码：</p>

<pre><code>NSNumber *numberBig = @(0x1234567890ABCDEF);
NSLog(@"numberBig pointer is %p", numberBig);
</code></pre>

<p>在64位模拟器中运行后，我得到了如下结果：</p>

<pre><code>numberBig pointer is 0x1094026a0
</code></pre>

<p>可以看出<code>numberBig</code>指针最后4位都是0，应该是分配在堆中的对象。因此，如果NSNumber超出了Tagged Pointer所能表示的范围，系统会自动采用分配成对象，可以根据指针的最后4位是否为0来区分。</p>

<h2>isa指针优化</h2>

<p>查看NSObject类的头文件，你会发现这段定义：</p>

<pre><code>@interface NSObject &lt;NSObject&gt; {
    Class isa;
}
</code></pre>

<p>所有类都继承自NSObject，因此每个对象都有一个isa<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>指针指向它所属的类。在《<a href="http://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html">ARM64 and You</a>》文章中指出：</p>

<p>在32位环境下，对象的引用计数都保存在一个外部的表中，而对引用计数的增减操作都要先锁定这个表，操作完成后才解锁。这个效率是非常慢的。</p>

<p>而在64位环境下，isa也是64位，实际作为指针部分只用到的其中33位，剩余的部分会运用到Tagged Pointer的概念，其中19位将保存对象的引用计数，这样对引用计数的操作只需要原子的修改这个指针即可，如果引用计数超出19位，才会将引用计数保存到外部表，而这种情况往往是很少的，因此效率将会大大提高。</p>

<h2>参考文献</h2>

<ul>
<li>Objective-C对象模型及应用： <a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/</a></li>
<li>ARM64 and You：<a href="http://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html">http://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>isa是“is a”，比如“Apple is a company”，表示一种从属关系。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C语言在Category中实现属性]]></title>
    <link href="http://blog.xcodev.com/blog/2013/08/14/implement-objc-property-in-category/"/>
    <updated>2013-08-14T10:43:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/08/14/implement-objc-property-in-category</id>
    <content type="html"><![CDATA[<p>做开发时我们常常会需要在已经实现了的类中增加一些方法，这时候我们一般会用Category的方式来做。但是这样做我们也只能扩展一些方法，而有时候我们更多的是想给它增加一个属性。由于类已经是编译好的了，就不能静态的增加成员了，这样我们就需要自己来实现getter和setter方法了，在这些方法中动态的读写属性变量来实现属性。一种比较简单的做法是使用Objective-C运行时的这两个方法：</p>

<pre><code>void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy);
id objc_getAssociatedObject(id object, const void *key);
</code></pre>

<!--more-->


<p>这两个方法可以让一个对象和另一个对象关联，就是说一个对象可以保持对另一个对象的引用，并获取那个对象。有了这些，就能实现属性功能了。
policy可以设置为以下这些值：</p>

<pre><code>enum {
    OBJC_ASSOCIATION_ASSIGN = 0,
    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,
    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,
    OBJC_ASSOCIATION_RETAIN = 01401,
    OBJC_ASSOCIATION_COPY = 01403
};
</code></pre>

<p>这些值跟属性定义中的nonatomic，copy，retain等关键字的功能类似。</p>

<h2>Example</h2>

<p>下面是一个属性自定义getter和setter的例子：</p>

<pre><code>NSString const * kExposeController = @"exposeController";

- (UIViewController *)exposeController {
    return (UIViewController *)objc_getAssociatedObject(self, kExposeController);
}

- (void)setExposeController:(UIViewController *)exposeController {
    objc_setAssociatedObject(self, kExposeController, exposeController, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}
</code></pre>

<p>可以看出使用objc_setAssociatedObject和objc_getAssociatedObject函数可以很方便的实现属性的getter和setter。</p>

<h2>一个很方便的宏</h2>

<p>为此，我特意写了一个Synthesize宏，可以提供@synthesize类似的功能。可以支持两种最常用的属性：非原子retain和assign属性（如果需要其他类型的属性可自行修改）。</p>

<pre><code>#import &lt;objc/runtime.h&gt;
#define SYNTHESIZE_CATEGORY_OBJ_PROPERTY(propertyGetter, propertySetter)                                                             
- (id) propertyGetter {                                                                                                             
    return objc_getAssociatedObject(self, @selector( propertyGetter ));                                                             
}                                                                                                                                   
- (void) propertySetter (id)obj{                                                                                                    
    objc_setAssociatedObject(self, @selector( propertyGetter ), obj, OBJC_ASSOCIATION_RETAIN_NONATOMIC);                            
}


#define SYNTHESIZE_CATEGORY_VALUE_PROPERTY(valueType, propertyGetter, propertySetter)                                                
- (valueType) propertyGetter {                                                                                                      
    valueType ret = {0};                                                                                                                  
    [objc_getAssociatedObject(self, @selector( propertyGetter )) getValue:&amp;ret];                                                    
    return ret;                                                                                                                     
}                                                                                                                                   
- (void) propertySetter (valueType)value{                                                                                           
    NSValue *valueObj = [NSValue valueWithBytes:&amp;value objCType:@encode(valueType)];                                                
    objc_setAssociatedObject(self, @selector( propertyGetter ), valueObj, OBJC_ASSOCIATION_RETAIN_NONATOMIC);                       
}
</code></pre>

<p>用这个宏只需要指定相关属性的类型，getter和setter就可以快速的实现一个属性。比如在UIAlert的Category实现一个非原子retain属性userInfo，以及一个assign的类型为CGRect的customArea属性：</p>

<p>UIAlertView+Ex.h</p>

<pre><code>@interface UIAlertView (Ex)
@property(nonatomic, retain) id userInfo;
@property(nonatomic) CGRect customArea;
@end
</code></pre>

<p>UIAlertView+Ex.m</p>

<pre><code>@implementation UIAlertView (Ex)
SYNTHESIZE_CATEGORY_OBJ_PROPERTY(userInfo, setUserInfo:)
SYNTHESIZE_CATEGORY_VALUE_PROPERTY(CGRect, customArea, setCustomArea:)
@end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS5网页视图（UIWebView）中的输入框不能弹出键盘的问题]]></title>
    <link href="http://blog.xcodev.com/blog/2013/07/30/no-keyboard-in-webview-of-ios5/"/>
    <updated>2013-07-30T10:32:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/07/30/no-keyboard-in-webview-of-ios5</id>
    <content type="html"><![CDATA[<p>项目开发时，发现有时候在网页视图中的输入框获得焦点后，却不能弹出键盘。而且全部都是在iOS5的系统中出现了这个问题，iOS6中运行完全是正常的，而且即使是在iOS5中，其他的UITextView和UITextField仍然可以正常地弹出键盘。我仔细了看了一下代码，发现对UIWebView的一些操作和键盘弹出并没有什么关系。我看了一些UIWebView的一些资料，然后发现了这个问题：UIWebView要能弹出键盘，那么它所在的window必须是key window。</p>

<!--more-->


<h2>什么是key window？</h2>

<p>key window就是接收键盘消息的window。键盘消息都会发送到key window上。而这个key window往往是系统自动设置的，但web view获得焦点并没有自动设置（也许是Apple开发偷了个懒），然而我们也可以用一个方法手动设置。</p>

<pre><code>[window makeKeyAndVisiable]
</code></pre>

<h2>一个演示例子</h2>

<p>为了验证这个问题我也写了一段简短的代码：</p>

<pre><code>UIWebView *webView = [[UIWebView alloc] initWithFrame:self.window.bounds];
[webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.google.com"]]];
[self.window addSubview:webView];

UIWindow *anotherWindow = [UIWindow new];
[anotherWindow makeKeyAndVisible];
</code></pre>

<p>这段代码在iOS5中运行的话，即使输入框获得了焦点也不能弹出键盘。
<img src="/images/post/no-keyboard-in-webview.jpg" alt="image" /></p>

<h2>解决方案</h2>

<p>如果在UIWebView被添加的window上时，将window设置为key window就好了。</p>

<pre><code>[self.window makeKeyAndVisiable]
[self.window addSubview:webView];
</code></pre>

<h2>小结</h2>

<p>UIWebView要能弹出键盘，那么它所在的window必须是key window。如果你的App可能存在多个Window（如弹出自定义的Alert，状态条等），而且这些window有可能被设置为key window，一定要在web view显示时将它所在的window设置为key window。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TableView中嵌套一个ScrollView有时导致ScrollView无法滚动]]></title>
    <link href="http://blog.xcodev.com/blog/2013/07/17/cant-scroll-in-tableview/"/>
    <updated>2013-07-17T15:34:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/07/17/cant-scroll-in-tableview</id>
    <content type="html"><![CDATA[<h2>TableView中嵌套ScrollView导致ScrollView无法滚动</h2>

<p>开发时，经常会在一个TableView中嵌套一个横向滚动ScrollView，当ScrollView进行滑动时，TableView中展示的信息也会需要相应的改变，那么有时就需要重新载入TableView的数据（reloadData）。这时当ScrollView连续滚动多次，经常会出现ScrollView滚动不了。在控制台上同时会出现以下日志信息：</p>

<pre><code>Ignoring call to [UIPanGestureRecognizer setTranslation:inView:] since gesture recognizer is not active.
</code></pre>

<!--more-->


<p>在QQ电影票新版开发过程中就遇到了这个问题。</p>

<p><img src="/images/post/scrollView_in_tableView.jpg" alt="image" /></p>

<p>中间显示电影列表的是一个ScrollView。滑动过程中，如果中间箭头所指向的电影发生变化，整个界面信息就会刷新，调用TableView的reloadData。经过几次连续不间断的滑动电影列表后，就会导致ScrollView卡住，然后控制台就会出现“Ignoring call to [UIPanGestureRecognizer setTranslation:inView:] since gesture recognizer is not active.”的错误日志。</p>

<h2>原因分析</h2>

<p>开始时我以为是我自定义的ScrollView控件有问题，尝试各种屏蔽代码的方法，结果只有屏蔽的delegate的方法才不会出现问题，应该是delegate中的某些调用出现了问题。我仔细的检查了一下delegate方法，发现和TableView有关的一句代码：</p>

<pre><code>[self.tableView reloadData];
</code></pre>

<p>当我把reloadData注释调时，发现滑动起来很流畅，也没有出现这个问题了。可以断定时滑动过程中reloadData导致。结合错误日志，所以应该是滑动时同时reloadData，导致ScrollView的滑动手势失效。</p>

<h2>解决办法</h2>

<p>因为是在ScrollView的delegate消息中去调tableView的reloadData，可能在ScrollView的delegate消息处理完成之后，系统还会做一些其他的处理，这是你突然reloadData会导致ScrollView移出superView，然后导致滑动手势失效，所以我尝试异步调用一下TableView的reloadData：</p>

<pre><code>dispatch_async(dispatch_get_main_queue(), ^{
     [self.tableView reloadData];
});
</code></pre>

<p>结果果然没有问题了。其实我觉得更好的做法是直接将delegate消息调用写成异步调用会更好一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 5中使用UIAppearance来自定义应用的外观]]></title>
    <link href="http://blog.xcodev.com/blog/2013/06/12/custom-ui-using-uiappearance/"/>
    <updated>2013-06-12T16:31:00+08:00</updated>
    <id>http://blog.xcodev.com/blog/2013/06/12/custom-ui-using-uiappearance</id>
    <content type="html"><![CDATA[<p>做App时，我们经常需要自定义一些界面展现，来适合我们App的内容，或来使App看起来更漂亮，有时我们不得不写大量的自定义控件来达到这个目的。iOS 5新增了UIAppearance协议，使得自定义风格简单方便了很多，通过UIAppearance协议，我们快速的修改系统内置的控件的外观，也可以自己定义一些可自定义外观的控件。</p>

<!--more-->


<h2>系统框架控件的一些自定义方法</h2>

<h4>自定义导航条背景</h4>

<pre><code>[[UINavigationBar appearance] setBackgroundImage:[UIImage imageNamed:@"background"] forBarMetrics:UIBarMetricsDefault];
</code></pre>

<h4>自定义导航标题文字属性</h4>

<pre><code>[[UINavigationBar appearance] setTitleTextAttributes:@{UITextAttributeTextColor:[UIColor darkGrayColor],UITextAttributeTextShadowColor:[UIColor clearColor]}];
</code></pre>

<p>可自定义标题字体，颜色，阴影。</p>

<h4>自定义导航条返回和左右按钮按钮背景</h4>

<pre><code>[[UIBarButtonItem appearanceWhenContainedIn:[UINavigationBar class], nil] setBackButtonBackgroundImage:[UIImage imageNamed:@"back_button_background"] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
[[UIBarButtonItem appearanceWhenContainedIn:[UINavigationBar class], nil] setBackgroundImage:[UIImage imageNamed:@"button_background"] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
</code></pre>

<h4>自定义底部Tab条的背景</h4>

<pre><code>[[UITabBar appearance] setBackgroundImage:[UIImage imageNamed:@"background"]];
</code></pre>

<h4>自定义底部条标题文字属性</h4>

<pre><code>[[UITabBarItem appearance] setTitleTextAttributes:@{UITextAttributeTextColor:[UIColor grayColor]} forState:UIControlStateNormal];
[[UITabBarItem appearance] setTitleTextAttributes:@{UITextAttributeTextColor:[UIColor orangeColor]} forState:UIControlStateSelected];
</code></pre>

<p>这里列举的都是一些最常用的自定义方法，只要是头文件中有“UI_APPEARANCE_SELECTOR”标记的方法都是可以用UIAppearance协议对象去调的。注意这些自定义方法都要在相应的对象显示之前调用，可以放到App启动后立刻配置，以后只要这个对象显示之前，就会设置相应的属性。</p>

<h2>自己创建一个可自定义外观的控件</h2>

<p>对于我们自己定义的控件，也可以支持UIAppearance协议，这样我们的控件也能支持自定义了。你只需要写一个设置外观的settor，然后在settor方法后面加上“UI_APPEARANCE_SELECTOR”标记就可以，其他什么都不需要做。比如一个可以自定义选择状态背景颜色的TableViewCell。</p>

<pre><code>@interface CustomCell : UITableViewCell
- (void)setSelectedBackgroundColor:(UIColor*)color UI_APPEARANCE_SELECTOR;
@end

@implementation CustomCell
- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        self.selectedBackgroundView = [UIView new];
        self.selectedBackgroundView.backgroundColor = [UIColor lightGrayColor];
    }
    return self;
}
- (void)setSelectedBackgroundColor:(UIColor*)color{
    self.selectedBackgroundView.backgroundColor = color;
}
@end
</code></pre>

<p>注意，官方文档中强调Appearance的setter定义格式应为：</p>

<pre><code>- (void)setProperty:(PropertyType)property forAxis1:(IntegerType)axis1 axis2:(IntegerType)axis2 axisN:(IntegerType)axisN;
- (PropertyType)propertyForAxis1:(IntegerType)axis1 axis2:(IntegerType)axis2 axisN:(IntegerType)axisN;
</code></pre>

<h2>UIAppearance实现原理</h2>

<p>在通过UIAppearance调用“UI_APPEARANCE_SELECTOR”标记的方法来配置外观时，UIAppearance实际上没有进行任何实际调用，而是把这个调用保存起来（在Objc中可以用NSInvocation对象来保存一个调用）。当实际的对象显示之前（添加到窗口上，drawRect:之前），就会对这个对象调用之前保存的调用。当这个setter调用后，你的界面风格自定义就完成了。</p>
]]></content>
  </entry>
  
</feed>
